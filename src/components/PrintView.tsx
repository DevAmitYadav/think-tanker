import React from 'react';
import { useMindMapStore } from '../store/mindMapStore';
import MindMapNode from './MindMapNode';
import Connector from './Connector';
import { getVisibleNodes } from '../utils/treeUtils';
import { Brain, Calendar, User } from 'lucide-react';

// This component is rendered conditionally/via portal for print
// It needs to render all nodes in their absolute positions without
// relying on canvasOffset/Scale directly as they are applied to the parent div
// For print, we essentially want a 1:1 render of the logical positions.
const PrintView: React.FC = () => {
  const { nodes, rootNodeId } = useMindMapStore();
  const visibleNodes = getVisibleNodes(nodes, rootNodeId);

  // Filter nodes that are actually rendered to determine connectors
  const renderedNodeIds = new Set(visibleNodes.map(node => node.id));
  const connectorsToRender = visibleNodes.flatMap(node =>
    node.children
      .filter(childId => renderedNodeIds.has(childId))
      .map(childId => ({ parent: node, child: nodes[childId] }))
  );

  // Determine the bounding box of all nodes to center the print view
  let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  visibleNodes.forEach(node => {
    minX = Math.min(minX, node.position.x);
    minY = Math.min(minY, node.position.y);
    maxX = Math.max(maxX, node.position.x);
    maxY = Math.max(maxY, node.position.y);
  });

  const contentWidth = maxX - minX;
  const contentHeight = maxY - minY;

  // Calculate offset to center the content
  const offsetX = -minX + 100; // Add padding
  const offsetY = -minY + 100; // Add padding

  // Get root node for title
  const rootNode = rootNodeId ? nodes[rootNodeId] : null;

  return (
    <div className="print-container hidden print:block w-full min-h-screen bg-white">
      {/* Print Header */}
      <div className="print-header p-8 border-b-2 border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Brain className="h-12 w-12 text-blue-600" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">ThinkTanker</h1>
              <p className="text-lg text-gray-600">Mind Mapping Solution</p>
            </div>
          </div>
          <div className="text-right text-gray-600">
            <div className="flex items-center space-x-2 mb-2">
              <Calendar className="h-4 w-4" />
              <span>{new Date().toLocaleDateString()}</span>
            </div>
            <div className="flex items-center space-x-2">
              <User className="h-4 w-4" />
              <span>Generated by ThinkTanker</span>
            </div>
          </div>
        </div>
        
        {rootNode && (
          <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <h2 className="text-xl font-semibold text-blue-900 mb-2">
              Mind Map: {rootNode.label}
            </h2>
            <p className="text-blue-700">
              This mind map contains {visibleNodes.length} nodes and demonstrates the hierarchical structure of ideas.
            </p>
          </div>
        )}
      </div>

      {/* Print Content */}
      <div 
        className="print-content relative w-full min-h-[calc(100vh-200px)] bg-white"
        style={{
          transform: `translate(${offsetX}px, ${offsetY}px)`,
          minWidth: `${contentWidth + 200}px`,
          minHeight: `${contentHeight + 200}px`,
          overflow: 'visible',
        }}
      >
        {/* Background Grid for Print */}
        <div 
          className="absolute inset-0 opacity-10"
          style={{
            backgroundImage: `
              linear-gradient(rgba(0,0,0,0.1) 1px, transparent 1px),
              linear-gradient(90deg, rgba(0,0,0,0.1) 1px, transparent 1px)
            `,
            backgroundSize: '20px 20px',
          }}
        />

        {/* SVG Connectors for Print */}
        <svg
          className="print-svg absolute inset-0 w-full h-full"
          style={{ 
            position: 'absolute', 
            left: 0, 
            top: 0, 
            width: '100%', 
            height: '100%', 
            overflow: 'visible', 
            zIndex: 2 
          }}
        >
          {connectorsToRender.map((conn) => (
            <Connector
              key={`${conn.parent.id}-${conn.child.id}`}
              parent={{ ...conn.parent, position: { x: conn.parent.position.x, y: conn.parent.position.y } }}
              child={{ ...conn.child, position: { x: conn.child.position.x, y: conn.child.position.y } }}
              canvasOffset={{ x: 0, y: 0 }}
              canvasScale={1}
              forceSolidColor={true}
            />
          ))}
        </svg>

        {/* Mind Map Nodes for Print */}
        {visibleNodes.map((node) => (
          <MindMapNode
            key={node.id}
            node={{ ...node, position: { x: node.position.x, y: node.position.y } }}
            canvasOffset={{ x: 0, y: 0 }}
            canvasScale={1}
          />
        ))}
      </div>

      {/* Print Footer */}
      <div className="print-footer p-6 border-t-2 border-gray-200">
        <div className="flex items-center justify-between text-sm text-gray-600">
          <div>
            <p>Generated on {new Date().toLocaleString()}</p>
            <p>Total nodes: {visibleNodes.length}</p>
          </div>
          <div className="text-right">
            <p>ThinkTanker - Mind Mapping Made Simple</p>
            <p>www.thinktanker.app</p>
          </div>
        </div>
      </div>

      {/* Print Styles */}
      <style jsx>{`
        @media print {
          .print-container {
            display: block !important;
            width: 100% !important;
            height: 100% !important;
            margin: 0 !important;
            padding: 0 !important;
            background: white !important;
          }
          
          .print-header,
          .print-footer {
            break-inside: avoid;
          }
          
          .print-content {
            break-inside: avoid;
            page-break-inside: avoid;
          }
          
          .mind-map-node {
            break-inside: avoid;
            page-break-inside: avoid;
          }
          
          /* Ensure good contrast for print */
          .mind-map-node {
            background: white !important;
            border: 2px solid #000 !important;
            color: #000 !important;
            box-shadow: none !important;
          }
          
          /* Hide interactive elements */
          .mind-map-node button,
          .mind-map-node .action-menu {
            display: none !important;
          }
          
          /* Ensure text is readable */
          .mind-map-node-label {
            color: #000 !important;
            background: white !important;
            border: 1px solid #ccc !important;
          }
        }
      `}</style>
    </div>
  );
};

export default PrintView;